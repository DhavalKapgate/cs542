CS542 Design Patterns
Fall 2016
PROJECT 4 README FILE

Due Date: Wednesday, November 23, 2016
Submission Date: Wednesday, November 23, 2016
Grace Period Used This Project: 0 Days
Grace Period Remaining: 0 Days
Author(s): DHAVAL KAPGATE
e-mail(s): dkapgat1@binghamton.edu

PURPOSE:
	Given a input text file (containing characters a-z,A-Z and 0-9 only) 
	>Visitor I 	: 	We create a data structure and populate it with words.
	>Visitor II : 	Using the populated data structure calculate number of words, number of distinct words, and number of characters.
	>Visitor III: 	Create a backup of the populated data structure, such that any change in the original data structure(Subject) 
					are reflected back to the backup(observers)
	>Visitor IV	:	Test the backup by manipulating the original data structure and generate a file for both original and backup 
					containing the their contents for comparision.
	
PERCENT COMPLETE:
	I believe I have completed 100% of this project.

PARTS THAT ARE NOT COMPLETE:
	I beleive I have no parts incomplete. 

BUGS:
	NONE

FILES:
	README.txt, the text file you are presently reading
	build.xml, Build file for ant
	Driver.java, the main file associated with the program also contains main
	AVLImp.java, the interface for the AVL Tree
	AVLTree.java, the file containing data members and functions/method for AVL Tree
	Node.java, file contatining data members and functions/method for nodes of tree
	Observer.java, interface for Observer (of Observer pattern)
	Subject.java, interface for Subject (of Observer Pattern)
	FileProcessor.java, file containing file I/O operations
	Logger.java, file containing methods to handle Debug states
	DSProcessingVisitorI.java, interface for all the visitors  
	PopulateVisitor.java, file containing methods to populate the tree (Visitor I)  
	WordCountVisitor.java, file containing methods to calculate number of words, number of distinct words, and number of characters (Visitor II)
	BackupVisitor.java, file containing method to perform backup of original tree (Visitor III) 
	TestBackupVisitor.java, file contatining methods to test backup (Visitor IV) 
	input.txt, the sample input for the program
	
	Files generated after execution:
	output.txt, file containing number of words, number of distinct words, and number of characters and the time of execution of Visitor I and II
	before_update.txt, text file containing backup tree contents (<word> COUNT: <word_count>) before manipulating the contents of tree  
	after_update.txt, the text file containing backup tree contents after manipulating the contents of original tree  
	updated_tree.txt, the  text file containing original tree contents after manipulating the contents of tree
	(perform diff on after_update.txt and updated_tree.txt to check observer pattern)
	
DATA STRUCTURE USED:
	AVL Tree are used for as the original data structure(that is populated by visitor I) and the backup (generated by Visitor III)
	Time complexity : O(log n).
	Space Complexity : O(n)
	wher n is total number of nodes (in this case total number of distinct words)
	
SAMPLE OUTPUT:
	bingsuns2% ant -buildfile build.xml all
	Buildfile: build.xml

	prepare:
		[mkdir] Created dir: /u0/users/3/dkapgat1/cs542/kapgate_dhaval_assign4/BUILD/classes

	wordCount:
		[javac] Compiling 13 source files to /u0/users/3/dkapgat1/cs542/kapgate_dhaval_assign4/BUILD/classes

	compile_all:

	all:

	BUILD SUCCESSFUL
	Total time: 3 seconds
	bingsuns2% ant -buildfile build.xml run -Darg0=input.txt -Darg1=output.txt -Darg2=1 -Darg3=0
	Buildfile: build.xml

	jar:

	run:

		 [java] TOTAL TIME: 111 milliseconds

	BUILD SUCCESSFUL
	Total time: 1 second
	bingsuns2% cat ../output.txt
	number of words=1312
	number of distinct words=640
	number of characters=6148
	bingsuns2%

TO COMPILE:
	ant -buildfile build.xml all
	
TO RUN:
	ant -buildfile build.xml run -Darg0=[input_file] -Darg1=[output_file] -Darg2=[NUM_OF_ITERATIONS] -Darg3=0
	
EXTRA CREDIT:
	N/A

BIBLIOGRAPHY:
	  This serves as evidence that we are in no way intending Academic Dishonesty.
	  Dhaval Kapgate.
	
		Reference:
		For AVL Tree
		http://algorithms.tutorialhorizon.com/avl-tree-insertion/
		For Observer pattern:
		HEAD FIRST DESIGN PATTERNS-Page 58
	  
ACKNOWLEDGEMENT:
	NONE